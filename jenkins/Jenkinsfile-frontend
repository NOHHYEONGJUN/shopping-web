pipeline {
    agent any
    
    environment {
        SERVER_IP = credentials('jcloud-ip')  // Jenkins에 등록한 IP Credential ID
        SSH_PORT = credentials('jcloud-port')    // Jenkins에 등록한 Port Credential ID
        DOCKER_IMAGE = "192.168.64.3/test/frontend"
        DOCKER_TAG = "v${env.BUILD_NUMBER}"
        SCANNER_HOME = tool 'SonarQube Scanner'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            agent {
                docker {
                    image 'node:14'
                    args '-v $HOME/.npm:/root/.npm'
                }
            }
            steps {
                dir('frontend') {
                    sh 'npm install'
                }
            }
        }
        
        // stage('SonarQube Analysis') {
        //     steps {
        //         withSonarQubeEnv('SonarQube') {
        //             sh """
        //                 ${SCANNER_HOME}/bin/sonar-scanner \
        //                 -Dsonar.projectKey=frontend-project \
        //                 -Dsonar.sources=frontend/src \
        //                 -Dsonar.exclusions=**/node_modules/**,**/*.spec.js \
        //                 -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info \
        //                 -Dsonar.java.binaries=/**/*.java
        //             """
        //         }
        //     }
        // }
        
        // stage('Quality Gate') {
        //     steps {
        //         timeout(time: 1, unit: 'HOURS') {
        //             // 개발 단계에서 Quality Gate 통과 후 배포 중지
        //             //waitForQualityGate abortPipeline: true
        //             waitForQualityGate abortPipeline: false
        //         }
        //     }
        // }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f frontend/Dockerfile ./frontend")
                    docker.withRegistry('https://192.168.64.3', 'harbor-hyeongjun') {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                    }
                }
            }
        }

        stage('Save Docker Image') {
            steps {
                sh "docker save ${DOCKER_IMAGE}:${DOCKER_TAG} > image.tar"
            }
        }
        
        stage('Deploy to ssh-web-server') {
            steps {
                sshagent(['ssh-web-server']) {
                    sh """
                        scp image.tar hj@192.168.64.4:~/
                        ssh -o StrictHostKeyChecking=no hj@192.168.64.4 '
                            set -e
                            docker load < image.tar || exit 1
                            docker stop frontend || true
                            docker rm frontend || true
                            docker run -d --name frontend -p 80:80 ${DOCKER_IMAGE}:${DOCKER_TAG} || exit 1
                            echo "Deployment completed"
                            docker ps | grep frontend || exit 1
                            rm image.tar
                        '
                    """
                }
            }
        }
        
        stage('Deploy to ssh-web-server-jcloud') {
            steps {
                sshagent(['ssh-web-server-jcloud']) {
                    sh """
                        scp -P ${SSH_PORT} image.tar ubuntu@${SERVER_IP}:~/
                        ssh -o StrictHostKeyChecking=no -p ${SSH_PORT} ubuntu@${SERVER_IP} '
                            set -e
                            docker load < image.tar || exit 1
                            docker stop frontend || true
                            docker rm frontend || true
                            docker run -d --name frontend -p 80:80 ${DOCKER_IMAGE}:${DOCKER_TAG} || exit 1
                            echo "Deployment completed"
                            docker ps | grep frontend || exit 1
                            rm image.tar
                        '
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
            sh "rm -f image.tar"
        }
    }
}