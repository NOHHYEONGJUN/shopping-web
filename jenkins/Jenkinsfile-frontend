pipeline {
    agent any
    
    environment {
        SERVER_IP = credentials('jcloud-ip')  
        SSH_PORT = credentials('jcloud-port')   
        DOCKER_IMAGE = "0b6fa52889bf.ngrok.app/test/frontend"
        DOCKER_TAG = "v${env.BUILD_NUMBER}"
        SCANNER_HOME = tool 'SonarQube Scanner'
        EXPRESS_API_URL = credentials('express-api-url')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            agent {
                docker {
                    image 'node:14'
                    args '-v $HOME/.npm:/root/.npm'
                }
            }
            steps {
                dir('frontend') {
                    sh 'npm install'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=frontend-project \
                        -Dsonar.sources=frontend/src \
                        -Dsonar.exclusions=**/node_modules/**,**/*.spec.js \
                        -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info \
                        -Dsonar.java.binaries=/**/*.java
                    """
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // 개발 단계에서 Quality Gate 통과 후 배포 중지
                    waitForQualityGate abortPipeline: true
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f frontend/Dockerfile ./frontend")
                    docker.withRegistry('https://0b6fa52889bf.ngrok.app', 'harbor-hyeongjun') {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                    }
                }
            }
        }
    }
}