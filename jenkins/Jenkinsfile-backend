pipeline {
    agent any
    
    environment {
        SERVER_IP = credentials('jcloud-ip')  // Jenkins에 등록한 IP Credential ID
        SSH_PORT = credentials('backend-server-port')    // Jenkins에 등록한 Port Credential ID
        DOCKER_IMAGE = "242472f69f44.ngrok.app/test/backend"
        DOCKER_TAG = "v${env.BUILD_NUMBER}"
        SCANNER_HOME = tool 'SonarQube Scanner'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
    stage('Cleanup') {
        steps {
            sh 'rm -rf node_modules'
            sh 'rm -f package-lock.json'
        }
    }
        
        stage('Install Dependencies') {
            agent {
                docker {
                    image 'node:14'
                    args '-v $HOME/.npm:/root/.npm'
                }
            }
            steps {
                dir('backend') {
                    sh 'npm install'
                }
            }
        }
        
        // stage('SonarQube Analysis') {
        //     steps {
        //         withSonarQubeEnv('SonarQube') {
        //             sh """
        //                 ${SCANNER_HOME}/bin/sonar-scanner \
        //                 -Dsonar.projectKey=backend-project \
        //                 -Dsonar.sources=backend/src \
        //                 -Dsonar.exclusions=**/node_modules/**,**/*.spec.js \
        //                 -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info \
        //                 -Dsonar.java.binaries=/**/*.java
        //             """
        //         }
        //     }
        // }
        
        // stage('Quality Gate') {
        //     steps {
        //         timeout(time: 1, unit: 'HOURS') {
        //             // 개발 단계에서 Quality Gate 통과 후 배포 중지
        //             //waitForQualityGate abortPipeline: true
        //             waitForQualityGate abortPipeline: false
        //         }
        //     }
        // }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f backend/Dockerfile ./backend")
                    docker.withRegistry('https://242472f69f44.ngrok.app', 'harbor-hyeongjun') {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                    }
                }
            }
        }

        stage('Save Docker Image') {
            steps {
                sh "docker save ${DOCKER_IMAGE}:${DOCKER_TAG} > image.tar"
            }
        }
        
        stage('Deploy to ssh-backend-server-jcloud') {
            steps {
                sshagent(['ssh-web-server-jcloud']) {
                    sh """
                        scp -o StrictHostKeyChecking=no -P ${SSH_PORT} image.tar ubuntu@${SERVER_IP}:~/
                        ssh -o StrictHostKeyChecking=no -p ${SSH_PORT} ubuntu@${SERVER_IP} '
                            set -e
                            docker load < image.tar || exit 1
                            rm image.tar
                            
                            # Update the image tag in docker-compose.yaml
                            sed -i "s|image: ${DOCKER_IMAGE}:.*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|" docker-compose.yaml
                            
                            # Stop and remove existing containers
                            docker-compose down
                            
                            # Start the updated containers
                            docker-compose up -d
                            
                            # Verify the backend container is running
                            docker-compose ps | grep backend || exit 1
                            
                            echo "Deployment completed"
                        '
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
            sh "rm -f image.tar"
        }
    }
}